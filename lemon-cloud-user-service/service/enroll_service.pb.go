// Code generated by protoc-gen-go. DO NOT EDIT.
// source: lemon-cloud-user-service/service/enroll_service.proto

package service

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	dto "lemon-cloud-user-common/dto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("lemon-cloud-user-service/service/enroll_service.proto", fileDescriptor_eaacb212d1683900)
}

var fileDescriptor_eaacb212d1683900 = []byte{
	// 144 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x32, 0xcd, 0x49, 0xcd, 0xcd,
	0xcf, 0xd3, 0x4d, 0xce, 0xc9, 0x2f, 0x4d, 0xd1, 0x2d, 0x2d, 0x4e, 0x2d, 0xd2, 0x2d, 0x4e, 0x2d,
	0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x87, 0xd1, 0xa9, 0x79, 0x45, 0xf9, 0x39, 0x39, 0xf1, 0x50, 0xae,
	0x5e, 0x41, 0x51, 0x7e, 0x49, 0xbe, 0x10, 0x3b, 0x94, 0x2b, 0xa5, 0x83, 0xa1, 0x3f, 0x39, 0x3f,
	0x37, 0x37, 0x3f, 0x4f, 0x3f, 0xa5, 0x24, 0x1f, 0xa6, 0x35, 0xa5, 0x24, 0x1f, 0xa2, 0xcd, 0xc8,
	0x9b, 0x8b, 0xd7, 0x15, 0x2c, 0x16, 0x0c, 0xd1, 0x2e, 0x64, 0xc5, 0xc5, 0x17, 0x9c, 0x99, 0x9e,
	0xe7, 0x99, 0xe7, 0x54, 0xe9, 0x57, 0x9a, 0x9b, 0x94, 0x5a, 0x24, 0x24, 0xa6, 0x07, 0x52, 0x8e,
	0x2a, 0x18, 0x94, 0x5a, 0x28, 0xc5, 0x87, 0x24, 0x1e, 0x54, 0x5c, 0xa0, 0xc4, 0x90, 0xc4, 0x06,
	0x36, 0xd3, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xf3, 0x2e, 0x1e, 0xc3, 0xc3, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EnrollServiceClient is the client API for EnrollService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EnrollServiceClient interface {
	SignInByNumber(ctx context.Context, in *dto.SignInByNumberReq, opts ...grpc.CallOption) (*dto.SignInRsp, error)
}

type enrollServiceClient struct {
	cc *grpc.ClientConn
}

func NewEnrollServiceClient(cc *grpc.ClientConn) EnrollServiceClient {
	return &enrollServiceClient{cc}
}

func (c *enrollServiceClient) SignInByNumber(ctx context.Context, in *dto.SignInByNumberReq, opts ...grpc.CallOption) (*dto.SignInRsp, error) {
	out := new(dto.SignInRsp)
	err := c.cc.Invoke(ctx, "/service.EnrollService/SignInByNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnrollServiceServer is the server API for EnrollService service.
type EnrollServiceServer interface {
	SignInByNumber(context.Context, *dto.SignInByNumberReq) (*dto.SignInRsp, error)
}

// UnimplementedEnrollServiceServer can be embedded to have forward compatible implementations.
type UnimplementedEnrollServiceServer struct {
}

func (*UnimplementedEnrollServiceServer) SignInByNumber(ctx context.Context, req *dto.SignInByNumberReq) (*dto.SignInRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignInByNumber not implemented")
}

func RegisterEnrollServiceServer(s *grpc.Server, srv EnrollServiceServer) {
	s.RegisterService(&_EnrollService_serviceDesc, srv)
}

func _EnrollService_SignInByNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dto.SignInByNumberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnrollServiceServer).SignInByNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.EnrollService/SignInByNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnrollServiceServer).SignInByNumber(ctx, req.(*dto.SignInByNumberReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _EnrollService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.EnrollService",
	HandlerType: (*EnrollServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignInByNumber",
			Handler:    _EnrollService_SignInByNumber_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lemon-cloud-user-service/service/enroll_service.proto",
}
